// lib/core/services/database_helper.dart
import 'dart:async';
import 'dart:convert';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/workout_session.dart';

/// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SportOn
class DatabaseHelper {
  static DatabaseHelper? _instance;
  static Database? _database;

  // Singleton pattern
  DatabaseHelper._internal();

  factory DatabaseHelper() {
    _instance ??= DatabaseHelper._internal();
    return _instance!;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<Database> get database async {
    _database ??= await _initDatabase();
    return _database!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<Database> _initDatabase() async {
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    final databasesPath = await getDatabasesPath();
    final path = join(databasesPath, 'sporton.db');

    print('üîç Database path: $path');

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE workout_sessions (
        id TEXT PRIMARY KEY,
        timer_type TEXT NOT NULL,
        start_time INTEGER NOT NULL,
        end_time INTEGER NOT NULL,
        total_duration INTEGER NOT NULL,
        status TEXT NOT NULL,
        workout_code TEXT,
        workout_title TEXT,
        link_type TEXT NOT NULL,
        user_notes TEXT,
        configuration TEXT NOT NULL,
        work_time INTEGER NOT NULL,
        rest_time INTEGER NOT NULL,
        pause_time INTEGER NOT NULL,
        rounds_completed INTEGER NOT NULL,
        classic_stats TEXT,
        created_at INTEGER NOT NULL,
        version INTEGER DEFAULT 1
      )
    ''');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await db.execute('''
      CREATE INDEX idx_workout_sessions_timer_type ON workout_sessions(timer_type)
    ''');

    await db.execute('''
      CREATE INDEX idx_workout_sessions_workout_code ON workout_sessions(workout_code)
    ''');

    await db.execute('''
      CREATE INDEX idx_workout_sessions_created_at ON workout_sessions(created_at)
    ''');

    await db.execute('''
      CREATE INDEX idx_workout_sessions_workout_key ON workout_sessions(workout_code, workout_title)
    ''');

    print('‚úÖ SportOn database created successfully');
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏
  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    print('üîÑ Upgrading database from version $oldVersion to $newVersion');

    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã
    if (oldVersion < 2) {
      // –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 2
      // await db.execute('ALTER TABLE workout_sessions ADD COLUMN new_field TEXT');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Future<int> insertWorkoutSession(WorkoutSession session) async {
    final db = await database;

    try {
      print('üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é: ${session.id}');
      print('üîç Display name: ${session.displayName}');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final sessionMap = session.toMap();
      print('üîç Session map keys: ${sessionMap.keys.toList()}');

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ JSON —Å—Ç—Ä–æ–∫–∏
      sessionMap['configuration'] = jsonEncode(sessionMap['configuration']);
      if (sessionMap['classic_stats'] != null) {
        sessionMap['classic_stats'] = jsonEncode(sessionMap['classic_stats']);
      }

      print('üîç Prepared data for DB: ${sessionMap.keys.toList()}');

      final result = await db.insert(
        'workout_sessions',
        sessionMap,
        conflictAlgorithm: ConflictAlgorithm.replace,
      );

      print('‚úÖ Workout session saved with result: $result, ID: ${session.id}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
      final count = await getWorkoutSessionsCount();
      print('‚úÖ Total sessions in DB: $count');

      return result;
    } catch (e, stackTrace) {
      print('‚ùå Error saving workout session: $e');
      print('‚ùå StackTrace: $stackTrace');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  Future<List<WorkoutSession>> getAllWorkoutSessions() async {
    final db = await database;

    try {
      print('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î...');

      final List<Map<String, dynamic>> maps = await db.query(
        'workout_sessions',
        orderBy: 'created_at DESC',
      );

      print('üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${maps.length}');

      if (maps.isNotEmpty) {
        print('üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å ID: ${maps.first['id']}');
        print('üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∫–ª—é—á–∏: ${maps.first.keys.toList()}');
      }

      final sessions = maps.map((map) => _mapToWorkoutSession(map)).toList();
      print('üîç –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã: ${sessions.length}');

      return sessions;
    } catch (e, stackTrace) {
      print('‚ùå Error loading workout sessions: $e');
      print('‚ùå StackTrace: $stackTrace');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–∞–π–º–µ—Ä–∞
  Future<List<WorkoutSession>> getWorkoutSessionsByType(String timerType) async {
    final db = await database;

    try {
      final List<Map<String, dynamic>> maps = await db.query(
        'workout_sessions',
        where: 'timer_type = ?',
        whereArgs: [timerType],
        orderBy: 'created_at DESC',
      );

      return maps.map((map) => _mapToWorkoutSession(map)).toList();
    } catch (e) {
      print('‚ùå Error loading sessions by type: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
  Future<List<WorkoutSession>> getWorkoutSessionsByKey(String workoutKey) async {
    final db = await database;

    try {
      final List<Map<String, dynamic>> maps = await db.query(
        'workout_sessions',
        where: 'workout_code = ? OR workout_title = ?',
        whereArgs: [workoutKey, workoutKey],
        orderBy: 'created_at DESC',
      );

      return maps.map((map) => _mapToWorkoutSession(map)).toList();
    } catch (e) {
      print('‚ùå Error loading sessions by key: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
  Future<WorkoutSession?> getWorkoutSessionById(String id) async {
    final db = await database;

    try {
      final List<Map<String, dynamic>> maps = await db.query(
        'workout_sessions',
        where: 'id = ?',
        whereArgs: [id],
        limit: 1,
      );

      if (maps.isNotEmpty) {
        return _mapToWorkoutSession(maps.first);
      }
      return null;
    } catch (e) {
      print('‚ùå Error loading session by ID: $e');
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Future<int> updateWorkoutSession(WorkoutSession session) async {
    final db = await database;

    try {
      final sessionMap = session.toMap();
      sessionMap['configuration'] = jsonEncode(sessionMap['configuration']);
      if (sessionMap['classic_stats'] != null) {
        sessionMap['classic_stats'] = jsonEncode(sessionMap['classic_stats']);
      }

      final result = await db.update(
        'workout_sessions',
        sessionMap,
        where: 'id = ?',
        whereArgs: [session.id],
      );

      print('‚úÖ Workout session updated: ${session.id}');
      return result;
    } catch (e) {
      print('‚ùå Error updating workout session: $e');
      rethrow;
    }
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  Future<int> deleteWorkoutSession(String id) async {
    final db = await database;

    try {
      print('üóëÔ∏è Attempting to delete session: $id');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      final result = await db.transaction((txn) async {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
        final existingRecords = await txn.query(
          'workout_sessions',
          where: 'id = ?',
          whereArgs: [id],
        );

        if (existingRecords.isEmpty) {
          print('‚ö†Ô∏è Session not found for deletion: $id');
          return 0;
        }

        print('üîç Found session to delete: ${existingRecords.first['id']}');

        // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        final deleteResult = await txn.delete(
          'workout_sessions',
          where: 'id = ?',
          whereArgs: [id],
        );

        print('üóëÔ∏è Delete operation result: $deleteResult');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞
        final verificationRecords = await txn.query(
          'workout_sessions',
          where: 'id = ?',
          whereArgs: [id],
        );

        if (verificationRecords.isNotEmpty) {
          print('‚ùå Session still exists after deletion attempt!');
          throw Exception('Failed to delete session: record still exists');
        }

        print('‚úÖ Session successfully deleted and verified: $id');
        return deleteResult;
      });

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
      final finalCount = await getWorkoutSessionsCount();
      print('üìä Total sessions in DB after deletion: $finalCount');

      return result;
    } catch (e, stackTrace) {
      print('‚ùå Error deleting workout session: $e');
      print('‚ùå StackTrace: $stackTrace');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  Future<int> getWorkoutSessionsCount() async {
    final db = await database;

    try {
      final result = await db.rawQuery('SELECT COUNT(*) as count FROM workout_sessions');
      final count = Sqflite.firstIntValue(result) ?? 0;
      print('üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: $count');
      return count;
    } catch (e) {
      print('‚ùå Error getting sessions count: $e');
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  Future<Map<String, dynamic>> getOverallStats() async {
    final db = await database;

    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final totalResult = await db.rawQuery('SELECT COUNT(*) as total FROM workout_sessions');
      final total = Sqflite.firstIntValue(totalResult) ?? 0;

      // –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final timeResult = await db.rawQuery('SELECT SUM(total_duration) as total_time FROM workout_sessions');
      final totalTime = Sqflite.firstIntValue(timeResult) ?? 0;

      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ç–∏–ø–∞–º
      final typeResult = await db.rawQuery('''
        SELECT timer_type, COUNT(*) as count 
        FROM workout_sessions 
        GROUP BY timer_type
      ''');

      final typeStats = <String, int>{};
      for (final row in typeResult) {
        typeStats[row['timer_type'] as String] = row['count'] as int;
      }

      return {
        'totalSessions': total,
        'totalTimeMs': totalTime,
        'sessionsByType': typeStats,
      };
    } catch (e) {
      print('‚ùå Error getting overall stats: $e');
      return {
        'totalSessions': 0,
        'totalTimeMs': 0,
        'sessionsByType': <String, int>{},
      };
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã/–Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  Future<Map<String, String>> getWorkoutCodesMap() async {
    final db = await database;

    try {
      final result = await db.rawQuery('''
        SELECT DISTINCT workout_code, workout_title 
        FROM workout_sessions 
        WHERE workout_code IS NOT NULL AND workout_title IS NOT NULL
      ''');

      final codesMap = <String, String>{};
      for (final row in result) {
        final code = row['workout_code'] as String;
        final title = row['workout_title'] as String;
        codesMap[code.toUpperCase()] = title;
      }

      return codesMap;
    } catch (e) {
      print('‚ùå Error getting workout codes: $e');
      return {};
    }
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Map –∏–∑ –ë–î –≤ WorkoutSession
  WorkoutSession _mapToWorkoutSession(Map<String, dynamic> map) {
    try {
      print('üîç –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å—å: ${map['id']}');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é map –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      final workingMap = Map<String, dynamic>.from(map);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JSON –æ–±—ä–µ–∫—Ç—ã
      final configurationJson = workingMap['configuration'] as String;
      try {
        workingMap['configuration'] = jsonDecode(configurationJson) as Map<String, dynamic>;
      } catch (e) {
        print('‚ö†Ô∏è Error decoding configuration: $e');
        workingMap['configuration'] = <String, dynamic>{};
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º classic_stats –µ—Å–ª–∏ –µ—Å—Ç—å
      final classicStatsJson = workingMap['classic_stats'] as String?;
      if (classicStatsJson != null && classicStatsJson.isNotEmpty && classicStatsJson != 'null') {
        try {
          workingMap['classic_stats'] = jsonDecode(classicStatsJson);
        } catch (e) {
          print('‚ö†Ô∏è Error decoding classic_stats: $e');
          workingMap['classic_stats'] = null;
        }
      } else {
        workingMap['classic_stats'] = null;
      }

      print('üîç –°–æ–∑–¥–∞–µ–º WorkoutSession: ${workingMap['id']}');
      final session = WorkoutSession.fromMap(workingMap);
      print('‚úÖ WorkoutSession —Å–æ–∑–¥–∞–Ω: ${session.displayName}');
      return session;
    } catch (e, stackTrace) {
      print('‚ùå Error mapping to WorkoutSession: $e');
      print('‚ùå Map data: $map');
      print('‚ùå StackTrace: $stackTrace');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> clearAllData() async {
    final db = await database;

    try {
      await db.delete('workout_sessions');
      print('‚úÖ All workout data cleared');
    } catch (e) {
      print('‚ùå Error clearing data: $e');
      rethrow;
    }
  }

  /// –ó–∞–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  Future<void> close() async {
    final db = _database;
    if (db != null) {
      await db.close();
      _database = null;
      print('‚úÖ Database closed');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<Map<String, dynamic>> getDatabaseInfo() async {
    final db = await database;

    try {
      final version = await db.getVersion();
      final path = db.path;
      final isOpen = db.isOpen;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
      final tables = await db.rawQuery("SELECT name FROM sqlite_master WHERE type='table'");
      final tableNames = tables.map((table) => table['name']).toList();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
      final schema = await db.rawQuery("PRAGMA table_info(workout_sessions)");
      final columns = schema.map((col) => {
        'name': col['name'],
        'type': col['type'],
        'notNull': col['notnull'] == 1,
        'primaryKey': col['pk'] == 1,
      }).toList();

      return {
        'version': version,
        'path': path,
        'isOpen': isOpen,
        'tables': tableNames,
        'tablesCount': tableNames.length,
        'workoutSessionsSchema': columns,
      };
    } catch (e) {
      print('‚ùå Error getting database info: $e');
      return {};
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
  Future<bool> verifyTableStructure() async {
    final db = await database;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      final tables = await db.rawQuery(
          "SELECT name FROM sqlite_master WHERE type='table' AND name='workout_sessions'"
      );

      if (tables.isEmpty) {
        print('‚ùå Table workout_sessions does not exist');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      final schema = await db.rawQuery("PRAGMA table_info(workout_sessions)");
      final requiredColumns = [
        'id', 'timer_type', 'start_time', 'end_time', 'total_duration',
        'status', 'workout_code', 'workout_title', 'link_type', 'user_notes',
        'configuration', 'work_time', 'rest_time', 'pause_time',
        'rounds_completed', 'classic_stats', 'created_at', 'version'
      ];

      final existingColumns = schema.map((col) => col['name'] as String).toList();
      final missingColumns = requiredColumns.where((col) => !existingColumns.contains(col)).toList();

      if (missingColumns.isNotEmpty) {
        print('‚ùå Missing columns: $missingColumns');
        return false;
      }

      print('‚úÖ Table structure is valid');
      return true;
    } catch (e) {
      print('‚ùå Error verifying table structure: $e');
      return false;
    }
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å —Å—ç–º–ø–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Future<List<Map<String, dynamic>>> getSampleData({int limit = 3}) async {
    final db = await database;

    try {
      final result = await db.query(
        'workout_sessions',
        orderBy: 'created_at DESC',
        limit: limit,
      );

      print('üîç Sample data (${result.length} records):');
      for (int i = 0; i < result.length; i++) {
        final record = result[i];
        print('  Record ${i + 1}: ID=${record['id']}, Type=${record['timer_type']}, Created=${record['created_at']}');
      }

      return result;
    } catch (e) {
      print('‚ùå Error getting sample data: $e');
      return [];
    }
  }
}