// lib/core/services/localization_service.dart
import 'package:flutter/material.dart';
import '../../l10n/generated/app_localizations.dart';

/// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ switch-case
class LocalizationService {
  LocalizationService._(); // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞

  // –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–≥—Ä–æ–º–Ω–æ–≥–æ switch-case
  static final Map<String, String Function(AppLocalizations)> _translationMap = {
    // Interval Timer 1
    'interval1Title': (l10n) => l10n.interval1Title,
    'interval1Subtitle': (l10n) => l10n.interval1Subtitle,
    'interval1Description': (l10n) => l10n.interval1Description,

    // Interval Timer 2
    'interval2Title': (l10n) => l10n.interval2Title,
    'interval2Subtitle': (l10n) => l10n.interval2Subtitle,
    'interval2Description': (l10n) => l10n.interval2Description,

    // Intensive Timer
    'intensiveTitle': (l10n) => l10n.intensiveTitle,
    'intensiveSubtitle': (l10n) => l10n.intensiveSubtitle,
    'intensiveDescription': (l10n) => l10n.intensiveDescription,

    // No Rest Timer
    'noRestTitle': (l10n) => l10n.noRestTitle,
    'noRestSubtitle': (l10n) => l10n.noRestSubtitle,
    'noRestDescription': (l10n) => l10n.noRestDescription,

    // Classic Timer
    'classicTitle': (l10n) => l10n.classicTitle,
    'classicSubtitle': (l10n) => l10n.classicSubtitle,
    'classicDescription': (l10n) => l10n.classicDescription,

    // Countdown Timer
    'countdownTitle': (l10n) => l10n.countdownTitle,
    'countdownSubtitle': (l10n) => l10n.countdownSubtitle,
    'countdownDescription': (l10n) => l10n.countdownDescription,
  };

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
  static String getTranslation(AppLocalizations l10n, String key) {
    final translator = _translationMap[key];
    return translator?.call(l10n) ?? key;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
  static String getThemeName(AppLocalizations l10n, String themeName) {
    switch (themeName) {
      case 'Dark':
        return '–¢–µ–º–Ω–∞—è'; // –ü–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
      case 'Classic':
        return '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è';
      case 'Ocean':
        return '–û–∫–µ–∞–Ω—Å–∫–∞—è';
      case 'Forest':
        return '–õ–µ—Å–Ω–∞—è';
      case 'Desert':
        return '–ü—É—Å—Ç—ã–Ω–Ω–∞—è';
      case 'Mocha Mousse':
        return '–ú–æ–∫–∫–æ –ú—É—Å—Å';
      default:
        return themeName;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
  static List<LocaleInfo> getSupportedLocales() {
    return const [
      LocaleInfo(
        locale: Locale('en', ''),
        name: 'English',
        nativeName: 'English',
        flag: 'üá∫üá∏',
      ),
      LocaleInfo(
        locale: Locale('ru', ''),
        name: 'Russian',
        nativeName: '–†—É—Å—Å–∫–∏–π',
        flag: 'üá∑üá∫',
      ),
    ];
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static String formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);

    if (hours > 0) {
      return '${hours}h ${minutes}m';
    } else if (minutes > 0) {
      return '${minutes}m';
    } else {
      return '${seconds}s';
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã)
  static String formatTime(int totalSeconds) {
    final hours = totalSeconds ~/ 3600;
    final minutes = (totalSeconds % 3600) ~/ 60;
    final seconds = totalSeconds % 60;

    return '${hours.toString().padLeft(2, '0')}:'
        '${minutes.toString().padLeft(2, '0')}:'
        '${seconds.toString().padLeft(2, '0')}';
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static String formatDate(DateTime date, AppLocalizations l10n) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(const Duration(days: 1));
    final targetDate = DateTime(date.year, date.month, date.day);

    if (targetDate == today) {
      return '–°–µ–≥–æ–¥–Ω—è ${_formatTimeOnly(date)}'; // –î–æ–±–∞–≤–∏–º –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    } else if (targetDate == yesterday) {
      return '–í—á–µ—Ä–∞ ${_formatTimeOnly(date)}';
    } else {
      return '${date.day.toString().padLeft(2, '0')}.'
          '${date.month.toString().padLeft(2, '0')}.'
          '${date.year} ${_formatTimeOnly(date)}';
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏
  static String _formatTimeOnly(DateTime date) {
    return '${date.hour.toString().padLeft(2, '0')}:'
        '${date.minute.toString().padLeft(2, '0')}';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞–π–º–µ—Ä–∞
  static String getTimerTypeName(AppLocalizations l10n, String timerType) {
    switch (timerType) {
      case 'Classic':
        return l10n.classicTitle;
      case 'WithRest':
      case 'IntervalWithRest':
        return l10n.interval1Title;
      case 'FixRoundRest':
      case 'FixedRounds':
        return l10n.interval2Title;
      case 'Intensive':
        return l10n.intensiveTitle;
      case 'NoRest':
        return l10n.noRestTitle;
      case 'ReverseCountdown':
      case 'Countdown':
        return l10n.countdownTitle;
      default:
        return timerType;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
  static String getTimeUnitShort(AppLocalizations l10n, String unit) {
    switch (unit.toLowerCase()) {
      case 'hours':
        return '—á';
      case 'minutes':
        return '–º';
      case 'seconds':
        return '—Å';
      default:
        return unit;
    }
  }

  /// –ü–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  static String pluralize(int count, List<String> forms) {
    if (forms.length != 3) {
      throw ArgumentError('Forms list must contain exactly 3 elements: [one, few, many]');
    }

    final absCount = count.abs();
    final lastDigit = absCount % 10;
    final lastTwoDigits = absCount % 100;

    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return forms[2]; // many
    }

    switch (lastDigit) {
      case 1:
        return forms[0]; // one
      case 2:
      case 3:
      case 4:
        return forms[1]; // few
      default:
        return forms[2]; // many
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏–µ–π
  static String getLocalizedCount(AppLocalizations l10n, int count, String type) {
    final currentLocale = l10n.localeName;

    if (currentLocale == 'ru') {
      switch (type) {
        case 'rounds':
          return '$count ${pluralize(count, ['—Ä–∞—É–Ω–¥', '—Ä–∞—É–Ω–¥–∞', '—Ä–∞—É–Ω–¥–æ–≤'])}';
        case 'minutes':
          return '$count ${pluralize(count, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])}';
        case 'seconds':
          return '$count ${pluralize(count, ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'])}';
        case 'workouts':
          return '$count ${pluralize(count, ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'])}';
        default:
          return '$count $type';
      }
    } else {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ø–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏—è
      switch (type) {
        case 'rounds':
          return '$count ${count == 1 ? 'round' : 'rounds'}';
        case 'minutes':
          return '$count ${count == 1 ? 'minute' : 'minutes'}';
        case 'seconds':
          return '$count ${count == 1 ? 'second' : 'seconds'}';
        case 'workouts':
          return '$count ${count == 1 ? 'workout' : 'workouts'}';
        default:
          return '$count $type${count == 1 ? '' : 's'}';
      }
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  static String? validateTimeInput(
      AppLocalizations l10n,
      String? value,
      int min,
      int max, {
        required String fieldName,
      }) {
    if (value == null || value.isEmpty) {
      return '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'; // –î–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    }

    final intValue = int.tryParse(value);
    if (intValue == null) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ';
    }

    if (intValue < min || intValue > max) {
      return '$fieldName –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç $min –¥–æ $max';
    }

    return null;
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª–∏
class LocaleInfo {
  final Locale locale;
  final String name;
  final String nativeName;
  final String flag;

  const LocaleInfo({
    required this.locale,
    required this.name,
    required this.nativeName,
    required this.flag,
  });

  @override
  String toString() => '$flag $nativeName';

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is LocaleInfo &&
              runtimeType == other.runtimeType &&
              locale == other.locale;

  @override
  int get hashCode => locale.hashCode;
}