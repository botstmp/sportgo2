// lib/core/providers/timer_provider.dart
import 'dart:async';
import 'dart:math' as math;
import 'package:flutter/material.dart';
import '../constants/ui_config.dart';
import '../enums/timer_enums.dart';
import '../../l10n/generated/app_localizations.dart';
// –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´:
import '../models/workout_session.dart';
import '../services/workout_history_service.dart';

/// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç—Å–µ—á–∫–µ –≤—Ä–µ–º–µ–Ω–∏
class LapTime {
  final int lapNumber;
  final int time; // –í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  final String formattedTime;
  final DateTime timestamp;
  final int lapDuration; // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞

  LapTime({
    required this.lapNumber,
    required this.time,
    required this.formattedTime,
    required this.timestamp,
    required this.lapDuration,
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞
  String get formattedLapDuration {
    final minutes = lapDuration ~/ 60;
    final seconds = lapDuration % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  Map<String, dynamic> toMap() {
    return {
      'lapNumber': lapNumber,
      'time': time,
      'formattedTime': formattedTime,
      'timestamp': timestamp.toIso8601String(),
      'lapDuration': lapDuration,
    };
  }

  factory LapTime.fromMap(Map<String, dynamic> map) {
    return LapTime(
      lapNumber: map['lapNumber'],
      time: map['time'],
      formattedTime: map['formattedTime'],
      timestamp: DateTime.parse(map['timestamp']),
      lapDuration: map['lapDuration'] ?? 0,
    );
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ SportOn
class TimerProvider with ChangeNotifier {
  // === –ü–†–ò–í–ê–¢–ù–´–ï –ü–û–õ–Ø ===
  Timer? _timer;
  TimerState _state = TimerState.stopped;
  TimerType _type = TimerType.classic;
  AppLocalizations? _localizations;

  // –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –ò–°–¢–û–†–ò–ò:
  final WorkoutHistoryService _historyService = WorkoutHistoryService();

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  String? _linkedWorkoutCode;
  String? _linkedWorkoutTitle;
  String? _userNotes;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
  int _workDuration = 60;     // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int _restDuration = 30;     // –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int _rounds = 1;            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
  int _currentRound = 1;      // –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥

  // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  int _currentTime = 0;       // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int _totalTime = 0;         // –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  DateTime? _startTime;       // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  DateTime? _endTime;         // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  int _totalWorkTime = 0;     // –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
  int _totalRestTime = 0;     // –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞

  // –û—Ç—Å–µ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  List<LapTime> _lapTimes = []; // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø–∞—É–∑—ã
  TimerState? _stateBeforePause;

  // === –ì–ï–¢–¢–ï–†–´ ===

  /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  TimerState get state => _state;

  /// –¢–∏–ø —Ç–∞–π–º–µ—Ä–∞
  TimerType get type => _type;

  /// –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int get workDuration => _workDuration;

  /// –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int get restDuration => _restDuration;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
  int get rounds => _rounds;

  /// –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
  int get currentRound => _currentRound;

  /// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  int get currentTime => _currentTime;

  /// –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  int get totalTime => _totalTime;

  /// –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (0.0 - 1.0)
  double get progress {
    if (_type == TimerType.classic && _state == TimerState.working) {
      // –î–ª—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      return (_currentTime % 60) / 60.0;
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É) - –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    if (_totalTime <= 0) return 0.0;

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 1.0 (–ø–æ–ª–Ω—ã–π –∫—Ä—É–≥) –¥–æ 0.0 (–ø—É—Å—Ç–æ–π)
    return (_totalTime - _currentTime) / _totalTime;
  }

  /// –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (0.0 - 1.0)
  double get totalProgress {
    if (_type == TimerType.classic) {
      // –î–ª—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–µ
      return (_currentTime % 3600) / 3600.0;
    }

    if (_rounds == 0) return 0.0;

    double roundProgress = (_currentRound - 1) / _rounds;
    double currentRoundProgress = 0.0;

    if (_state == TimerState.working) {
      currentRoundProgress = progress / (_rounds * 2); // –†–∞–±–æ—Ç–∞ –∏ –æ—Ç–¥—ã—Ö
    } else if (_state == TimerState.resting) {
      currentRoundProgress = (1 + progress) / (_rounds * 2);
    }

    return (roundProgress + currentRoundProgress).clamp(0.0, 1.0);
  }

  /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  DateTime? get startTime => _startTime;

  /// –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  DateTime? get endTime => _endTime;

  /// –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
  int get totalWorkTime => _totalWorkTime;

  /// –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
  int get totalRestTime => _totalRestTime;

  /// –°–ø–∏—Å–æ–∫ –æ—Ç—Å–µ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–∏
  List<LapTime> get lapTimes => List.unmodifiable(_lapTimes);

  /// –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Duration? get totalDuration {
    if (_startTime == null) return null;
    final endTime = _endTime ?? DateTime.now();
    return endTime.difference(_startTime!);
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (MM:SS)
  String get formattedTime {
    final minutes = _currentTime ~/ 60;
    final seconds = _currentTime % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  String getCurrentPeriodName(AppLocalizations l10n) {
    switch (_state) {
      case TimerState.preparation:
        return l10n.preparation;
      case TimerState.working:
        return l10n.work;
      case TimerState.resting:
        return l10n.rest;
      case TimerState.paused:
        return l10n.paused;
      case TimerState.finished:
        return l10n.finished;
      default:
        return l10n.stopped;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∞–π–º–µ—Ä–∞
  String getTimerTypeName(AppLocalizations l10n) {
    switch (_type) {
      case TimerType.classic:
        return l10n.stopwatchTitle;
      case TimerType.interval1:
        return l10n.interval1Title;
      case TimerType.interval2:
        return l10n.interval2Title;
      case TimerType.intensive:
        return l10n.intensiveTitle;
      case TimerType.norest:
        return l10n.noRestTitle;
      case TimerType.countdown:
        return l10n.countdownTitle;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∞–π–º–µ—Ä–∞
  String getTimerTypeDescription(AppLocalizations l10n) {
    switch (_type) {
      case TimerType.classic:
        return l10n.stopwatchDescription;
      case TimerType.interval1:
        return l10n.interval1Description;
      case TimerType.interval2:
        return l10n.interval2Description;
      case TimerType.intensive:
        return l10n.intensiveDescription;
      case TimerType.norest:
        return l10n.noRestDescription;
      case TimerType.countdown:
        return l10n.countdownDescription;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä
  bool get isRunning => _state == TimerState.working || _state == TimerState.resting || _state == TimerState.preparation;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –ø–∞—É–∑–µ –ª–∏ —Ç–∞–π–º–µ—Ä
  bool get isPaused => _state == TimerState.paused;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä
  bool get isFinished => _state == TimerState.finished;

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ò–í–Ø–ó–ö–ò –ö –¢–†–ï–ù–ò–†–û–í–ö–ï ===

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  void setWorkoutLink({
    String? workoutCode,
    String? workoutTitle,
    String? userNotes,
  }) {
    if (_state == TimerState.stopped) {
      _linkedWorkoutCode = workoutCode;
      _linkedWorkoutTitle = workoutTitle;
      _userNotes = userNotes;
      print('üè∑ TimerProvider: Workout linked - Code: $workoutCode, Title: $workoutTitle');
      notifyListeners();
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  void clearWorkoutLink() {
    _linkedWorkoutCode = null;
    _linkedWorkoutTitle = null;
    _userNotes = null;
    print('üè∑ TimerProvider: Workout link cleared');
    notifyListeners();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  Map<String, String?> getWorkoutLinkInfo() {
    return {
      'workoutCode': _linkedWorkoutCode,
      'workoutTitle': _linkedWorkoutTitle,
      'userNotes': _userNotes,
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  bool get hasWorkoutLink => _linkedWorkoutCode != null || _linkedWorkoutTitle != null;

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  String? get linkedWorkoutDisplayName {
    if (_linkedWorkoutCode != null && _linkedWorkoutTitle != null) {
      return '$_linkedWorkoutCode "$_linkedWorkoutTitle"';
    } else if (_linkedWorkoutCode != null) {
      return _linkedWorkoutCode;
    } else if (_linkedWorkoutTitle != null) {
      return _linkedWorkoutTitle;
    }
    return null;
  }

  // === –ú–ï–¢–û–î–´ –ù–ê–°–¢–†–û–ô–ö–ò ===

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
  void setLocalizations(AppLocalizations localizations) {
    _localizations = localizations;
    notifyListeners();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Ç–∞–π–º–µ—Ä–∞
  void setTimerType(TimerType type) {
    if (_state == TimerState.stopped) {
      _type = type;
      _applyTimerTypeDefaults();
      notifyListeners();
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
  void setWorkDuration(int seconds) {
    if (_state == TimerState.stopped && seconds > 0) {
      _workDuration = seconds;
      notifyListeners();
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
  void setRestDuration(int seconds) {
    if (_state == TimerState.stopped && seconds >= 0) {
      _restDuration = seconds;
      notifyListeners();
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
  void setRounds(int rounds) {
    if (_state == TimerState.stopped && rounds > 0) {
      _rounds = rounds;
      notifyListeners();
    }
  }

  /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ —Ç–∞–π–º–µ—Ä–∞
  void _applyTimerTypeDefaults() {
    switch (_type) {
      case TimerType.classic:
        _workDuration = 0;      // –î–ª—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –≤—Ä–µ–º—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
        _restDuration = 0;      // –ë–µ–∑ –æ—Ç–¥—ã—Ö–∞
        _rounds = 1;            // –û–¥–∏–Ω "—Ä–∞—É–Ω–¥"
        break;
      case TimerType.interval1:
        _workDuration = 45;
        _restDuration = 15;
        _rounds = 8;
        break;
      case TimerType.interval2:
        _workDuration = 30;
        _restDuration = 30;
        _rounds = 6;
        break;
      case TimerType.intensive:
        _workDuration = 20;
        _restDuration = 10;
        _rounds = 12;
        break;
      case TimerType.norest:
        _workDuration = 300;
        _restDuration = 0;
        _rounds = 1;
        break;
      case TimerType.countdown:
        _workDuration = 300;
        _restDuration = 0;
        _rounds = 1;
        break;
    }
  }

  // === –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
  void start() {
    if (_state == TimerState.stopped) {
      _startTime = DateTime.now();
      _totalWorkTime = 0;
      _totalRestTime = 0;
      _currentRound = 1;
      _lapTimes.clear(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—Å–µ—á–∫–∏

      // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
      _startPreparation();
    } else if (_state == TimerState.paused) {
      _resume();
    }
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  void _startPreparation() {
    _state = TimerState.preparation;
    _currentTime = UIConfig.preparationDuration;
    _totalTime = UIConfig.preparationDuration;
    _startTimer();
    notifyListeners();
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥
  void _startWorking() {
    _state = TimerState.working;

    if (_type == TimerType.classic) {
      // –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (—Å–µ–∫—É–Ω–¥–æ–º–µ—Ä) - —Å—á–∏—Ç–∞–µ–º –≤–ø–µ—Ä–µ–¥
      _currentTime = 0;
      _totalTime = 0; // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    } else {
      // –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ - –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
      _currentTime = _workDuration;
      _totalTime = _workDuration;
    }

    _startTimer();
    notifyListeners();
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–¥—ã—Ö–∞
  void _startResting() {
    if (_restDuration > 0) {
      _state = TimerState.resting;
      _currentTime = _restDuration;
      _totalTime = _restDuration;
      _startTimer();
    } else {
      _nextRound();
    }
    notifyListeners();
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–∞–π–º–µ—Ä
  void _startTimer() {
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      _tick();
    });
  }

  /// –¢–∏–∫ —Ç–∞–π–º–µ—Ä–∞
  void _tick() {
    if (_type == TimerType.classic && _state == TimerState.working) {
      // –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ - —Å—á–∏—Ç–∞–µ–º –≤–ø–µ—Ä–µ–¥
      _currentTime++;
      _totalWorkTime++;
      notifyListeners();
    } else {
      // –î–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ò –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ - –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
      if (_currentTime > 0) {
        _currentTime--;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (_state == TimerState.working) {
          _totalWorkTime++;
        } else if (_state == TimerState.resting) {
          _totalRestTime++;
        }

        notifyListeners();
      } else {
        _onPeriodComplete();
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  void _onPeriodComplete() {
    switch (_state) {
      case TimerState.preparation:
        _startWorking();
        break;
      case TimerState.working:
        if (_restDuration > 0) {
          _startResting();
        } else {
          _nextRound();
        }
        break;
      case TimerState.resting:
        _nextRound();
        break;
      default:
        break;
    }
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
  void _nextRound() {
    if (_currentRound < _rounds) {
      _currentRound++;
      _startWorking();
    } else {
      _finish();
    }
  }

  /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
  void pause() {
    if (isRunning) {
      _timer?.cancel();
      _stateBeforePause = _state;
      _state = TimerState.paused;
      notifyListeners();
    }
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
  void _resume() {
    if (_state == TimerState.paused) {
      if (_stateBeforePause != null) {
        _state = _stateBeforePause!;
        _stateBeforePause = null;
      } else {
        _state = _currentTime > 0 ? TimerState.working : TimerState.resting;
      }

      _startTimer();
      notifyListeners();
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
  void stop() {
    _timer?.cancel();
    _state = TimerState.stopped;
    _currentTime = 0;
    _totalTime = 0;
    _currentRound = 1;
    _endTime = null;
    _stateBeforePause = null;
    notifyListeners();
  }

  /// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  void _finish() {
    _timer?.cancel();
    _state = TimerState.finished;
    _endTime = DateTime.now();
    _currentTime = 0;
    _stateBeforePause = null;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    _saveWorkoutSession();

    notifyListeners();
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Future<void> _saveWorkoutSession() async {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      final session = WorkoutSession.fromTimerProvider(
        this,
        workoutCode: _linkedWorkoutCode,
        workoutTitle: _linkedWorkoutTitle,
        userNotes: _userNotes,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      final success = await _historyService.saveWorkoutSession(session);

      if (success) {
        print('‚úÖ TimerProvider: Workout session auto-saved - ${session.displayName}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∫–æ—Ä–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
        if (session.isLinkedWorkout) {
          final recordResult = await _historyService.checkForRecord(session);
          if (recordResult.isRecord) {
            print('üèÜ TimerProvider: NEW RECORD! ${recordResult.message}');
          } else if (recordResult.isFirstAttempt) {
            print('üéØ TimerProvider: First attempt for this workout!');
          }
        }
      } else {
        print('‚ùå TimerProvider: Failed to auto-save workout session');
      }
    } catch (e) {
      print('‚ùå TimerProvider: Error during auto-save - $e');
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä
  void reset() {
    stop();
    _startTime = null;
    _endTime = null;
    _totalWorkTime = 0;
    _totalRestTime = 0;
    _lapTimes.clear();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    clearWorkoutLink();

    notifyListeners();
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–µ—á–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞)
  void addLapTime() {
    if (_type == TimerType.classic && _state == TimerState.working) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞
      final lapDuration = _lapTimes.isEmpty
          ? _currentTime  // –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - –æ—Ç –Ω–∞—á–∞–ª–∞
          : _currentTime - _lapTimes.last.time; // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ - —Ä–∞–∑–Ω–∏—Ü–∞

      final lapTime = LapTime(
        lapNumber: _lapTimes.length + 1,
        time: _currentTime,
        formattedTime: formattedTime,
        timestamp: DateTime.now(),
        lapDuration: lapDuration,
      );

      _lapTimes.add(lapTime);
      print('üèÉ TimerProvider: Lap ${lapTime.lapNumber} added - Duration: ${lapTime.formattedLapDuration}, Total: ${lapTime.formattedTime}');
      notifyListeners();
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  Map<String, dynamic> getLapStats() {
    if (_lapTimes.isEmpty) {
      return {
        'totalLaps': 0,
        'averageLapTime': 0,
        'fastestLap': 0,
        'slowestLap': 0,
        'consistency': 0.0,
      };
    }

    final lapDurations = _lapTimes.map((lap) => lap.lapDuration).toList();
    final total = lapDurations.reduce((a, b) => a + b);
    final average = total / lapDurations.length;
    final fastest = lapDurations.reduce((a, b) => a < b ? a : b);
    final slowest = lapDurations.reduce((a, b) => a > b ? a : b);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏)
    final variance = lapDurations
        .map((duration) => (duration - average) * (duration - average))
        .reduce((a, b) => a + b) / lapDurations.length;
    final standardDeviation = variance > 0 ? math.sqrt(variance) : 0;
    final consistency = average > 0 ? (1 - (standardDeviation / average)) * 100 : 0;

    return {
      'totalLaps': _lapTimes.length,
      'averageLapTime': average,
      'fastestLap': fastest,
      'slowestLap': slowest,
      'consistency': consistency.clamp(0.0, 100.0),
      'lapDetails': _lapTimes.map((lap) => lap.toMap()).toList(),
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Map<String, dynamic> getWorkoutResults() {
    final baseResults = {
      'type': _type.toString(),
      'workDuration': _workDuration,
      'restDuration': _restDuration,
      'rounds': _rounds,
      'completedRounds': _currentRound,
      'totalWorkTime': _totalWorkTime,
      'totalRestTime': _totalRestTime,
      'startTime': _startTime?.toIso8601String(),
      'endTime': _endTime?.toIso8601String(),
      'totalDuration': totalDuration?.inSeconds,
      'isCompleted': _state == TimerState.finished,
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—è–∑–∫–µ
      'linkedWorkoutCode': _linkedWorkoutCode,
      'linkedWorkoutTitle': _linkedWorkoutTitle,
      'userNotes': _userNotes,
      'hasWorkoutLink': hasWorkoutLink,
    };

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    if (_type == TimerType.classic) {
      final lapStats = getLapStats();
      baseResults['lapStats'] = lapStats;
      baseResults['lapTimes'] = _lapTimes.map((lap) => lap.toMap()).toList();
    } else {
      baseResults['lapTimes'] = _lapTimes.map((lap) => lap.time).toList();
    }

    return baseResults;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
  Map<String, dynamic> getTimerSettings() {
    return {
      'type': _type.toString(),
      'workDuration': _workDuration,
      'restDuration': _restDuration,
      'rounds': _rounds,
    };
  }

  // === –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –†–ï–°–£–†–°–û–í ===

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}